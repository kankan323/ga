from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import random
import math
import copy
global dimension
dimension = 20
class Ind():
    def __init__(self):
        global dimension
        self.fitness = 0
        self.x = np.zeros(dimension)   #初始化编码sum_len
        self.place = 0
def Cal_fit(x, upper, lower):  #计算适应度值函数
    global dimension
    f = 0
    for i in range(dimension):
        if x[i] > upper:
            x[i] = random.uniform(lower, upper)
        f = f + x[i]*x[i]
    return f
    
def Init(G, upper, lower, Pop):  #初始化函数
    global dimension
    for i in range(Pop):
        for j in range(dimension):
            G[i].x[j] = random.uniform(lower, upper)
        G[i].fitness = Cal_fit(G[i].x, upper, lower)
        G[i].place = i

        
def Find_Best(G, Pop):
    Temp = copy.deepcopy(G[0])
    for i in range(1, Pop, 1):
        if G[i].fitness < Temp.fitness:
            Temp = copy.deepcopy(G[i])
    return Temp

def Selection(G, Gparent, Pop, Ppool):    #选择函数
    pk = np.zeros(Pop)
    pk[0] = G[0].fitness
    for i in range(1, Pop, 1):
        pk[i] = G[i].fitness + pk[i - 1]
    pk = pk/pk.max()
    qk = np.zeros(Pop)
    qk[0] = pk[0]
    for i in range (1,Pop,1):
        qk[i] = pk[i]+qk[i-1]
    for i in range(Ppool):
        rate = random.random()
        Gparent[i] = copy.deepcopy(G[np.where(qk > rate)[0][0]])




def Cross_and_Mutation(Gparent, Gchild, Pc, Pm, upper, lower, Pop, Ppool):  #交叉和变异
    global dimension
    for i in range(Ppool):
        place = random.sample([_ for _ in range(Ppool)], 2)
        parent1 = copy.deepcopy(Gparent[place[0]])
        parent2 = copy.deepcopy(Gparent[place[1]])
        parent3 = copy.deepcopy(parent2)
        if random.random() < Pc:
            num = random.sample([_ for _ in range(1, dimension-1, 1)], 2)
            num.sort()
            if random.random() < 0.5:
                for j in range(num[0], num[1], 1):
                    parent2.x[j] = parent1.x[j]
            else:
                for j in range(0, num[0], 1):
                    parent2.x[j] = parent1.x[j]
                for j in range(num[1], dimension, 1):
                    parent2.x[j] = parent1.x[j]
            num = random.sample([_ for _ in range(1, dimension-1, 1)], 2)
            num.sort()
            num.sort()
            if random.random() < 0.5:
                for j in range(num[0], num[1], 1):
                    parent1.x[j] = parent3.x[j]
            else:
                for j in range(0, num[0], 1):
                    parent1.x[j] = parent3.x[j]
                for j in range(num[1], dimension, 1):
                    parent1.x[j] = parent3.x[j]
        for j in range(dimension):
            if random.random() < Pm:
                parent1.x[j] = random.uniform(lower, upper)
            if random.random() < Pm:
                parent2.x[j] = random.uniform(lower, upper)

        parent1.fitness = Cal_fit(parent1.x, upper, lower)
        parent2.fitness = Cal_fit(parent2.x, upper, lower)
        Gchild[2 * i] = copy.deepcopy(parent1)
        Gchild[2 * i + 1] = copy.deepcopy(parent2)

def Choose_next(G, Gchild, Gsum, Pop):    #选择下一代函数
    for i in range(Pop):
        Gsum[i] = copy.deepcopy(G[i])
        Gsum[2 * i + 1] = copy.deepcopy(Gchild[i])
    Gsum = sorted(Gsum, key = lambda x: x.fitness, reverse = False)
    for i in range(Pop):
        G[i] = copy.deepcopy(Gsum[i])
        G[i].place = i


def Self_Learn(Best, upper, lower, sPm, sLearn):  #自学习操作
    global dimension
    num = 0
    Temp = copy.deepcopy(Best)
    while True:
        num += 1
        for j in range(dimension):
            if random.random() < sPm:
                Temp.x[j] = random.uniform(lower, upper)
        Temp.fitness = Cal_fit(Temp.x, upper, lower)
        if Temp.fitness < Best.fitness:
            Best = copy.deepcopy(Temp)
            num = 0
        if num > sLearn:
            break
    return Best
if __name__ == '__main__':
    upper = 100
    lower = -100
    Pop = 100
    Ppool = 50
    G_max = 1000000
    Pc = 0.8
    Pm = 0.1
    sPm = 0.05
    sLearn = 20
    G = np.array([Ind() for _ in range(Pop)])
    Gparent = np.array([Ind() for _  in range(Ppool)])
    Gchild = np.array([Ind() for _ in range(Pop)])
    Gsum = np.array([Ind() for _ in range(Pop * 2)])
    Init(G, upper, lower, Pop)       #初始化
    Best = Find_Best(G, Pop)
    fit1= []
    for k in range(G_max):
        Selection(G, Gparent, Pop, Ppool)       #使用轮盘赌方法选择其中50%为父代
        Cross_and_Mutation(Gparent, Gchild, Pc, Pm, upper, lower, Pop, Ppool)  #交叉和变异生成子代
        Choose_next(G, Gchild, Gsum, Pop)       #选择出父代和子代中较优秀的个体
        Cbest = Find_Best(G, Pop)
        if Best.fitness < Cbest.fitness:
            Best = copy.deepcopy(Cbest)        #更新最优解
        else:
            G[Cbest.place] = copy.deepcopy(Best)
        Best = Self_Learn(Best, upper, lower, sPm, sLearn)
        print("这是第%d代"%k)
        print(Best.fitness)
        fit1.append(Best.fitness)
    print(Best.x)
    X = []
    Y = []
    for i in range(G_max): 
        X.append(i)
        t = fit1[i]
        Y.append(t)
    plt.plot(X, Y) 
    plt.show()

